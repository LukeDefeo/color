#+SETUPFILE: ../src/setup.org

* thi.ng.color.test.core

** Tests

Note: Some tests using bitops on =Int32= will fail in CLJS tests, that
doesn't mean they're broken, just that I haven't manually produced the
clipped & signed 32bit test values...

#+BEGIN_SRC clojure :noweb-ref test
  (deftest conversion-rgb
    (is (= thi.ng.color.core.RGBA (type (col/rgba 0 0 0))))
    (is (= thi.ng.color.core.Int24 (type (col/int24 0))))
    (is (= thi.ng.color.core.Int32 (type (col/int32 0))))
    (is (d= [1 0.5 0.25 0.75] @(col/rgba 1 0.5 0.25 0.75)))
    (is (d= [0 1 1 1] @(col/as-hsva (col/rgba 1 0 0 1))))
    (is (d= [col/THIRD 1 1 1] @(col/as-hsva (col/rgba 0 1 0 1))))
    (is (d= [col/TWO_THIRD 1 1 1] @(col/as-hsva (col/rgba 0 0 1 1))))
    (is (d= [0.5 1 1 1] @(col/as-hsva (col/rgba 0 1 1 1))))
    (is (d= [0 0 1 1] @(col/as-hsva (col/rgba 1 1 1 1))))
    (is (d= [0 1 0.5 1] @(col/as-hsla (col/rgba 1 0 0 1))))
    (is (d= [col/THIRD 1 0.5 1] @(col/as-hsla (col/rgba 0 1 0 1))))
    (is (d= [col/TWO_THIRD 1 0.5 1] @(col/as-hsla (col/rgba 0 0 1 1))))
    (is (d= [0.5 1 0.5 1] @(col/as-hsla (col/rgba 0 1 1 1))))
    (is (d= [0 0 1 1] @(col/as-hsla (col/rgba 1 1 1 1))))
    (is (= 0xff0000 @(col/as-int24 (col/rgba 1 0 0 1))))
    (is (= 0x00ff00 @(col/as-int24 (col/rgba 0 1 0 1))))
    (is (= 0x0000ff @(col/as-int24 (col/rgba 0 0 1 1))))
    (is (= 0x3fff0000 @(col/as-int32 (col/rgba 1 0 0 0.25))))
    (is (= 0x7f00ff00 @(col/as-int32 (col/rgba 0 1 0 0.5))))
    (is (= 0xff0000ff @(col/as-int32 (col/rgba 0 0 1 1))))
    (is (= [0.0 1.0 1.0 0.0 1.0] @(col/as-cmyka (col/rgba 1 0 0 1))))
    (is (= [1.0 0.0 1.0 0.0 1.0] @(col/as-cmyka (col/rgba 0 1 0 1))))
    (is (= [1.0 1.0 0.0 0.0 1.0] @(col/as-cmyka (col/rgba 0 0 1 1))))
    (is (= "#ff0000" @(col/as-css (col/rgba 1 0 0 1))))
    (is (= "#00ff00" @(col/as-css (col/rgba 0 1 0 1))))
    (is (= "#0000ff" @(col/as-css (col/rgba 0 0 1 1))))
    (is (= "rgba(63,127,191,0.33)" @(col/as-css (col/rgba 0.25 0.5 0.75 0.33)))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest conversion-hsv
   (is (= thi.ng.color.core.HSVA (type (col/hsva 0 0 0))))
   (is (d= [0 0.5 0.75 0.25] @(col/hsva 0 0.5 0.75 0.25)))
   (is (d= [1 0 0 0.5] @(col/as-rgba (col/hsva 0 1 1 0.5))))
   (is (d= [0 1 0 1] @(col/as-rgba (col/hsva col/THIRD 1 1))))
   (is (d= [0 0.5 0.5 1] @(col/as-rgba (col/hsva 0.5 1 0.5))))
   (is (d= [0 0 1 1] @(col/as-rgba (col/hsva col/TWO_THIRD 1 1 1))))
   (is (d= [1 1 1 1] @(col/as-rgba (col/hsva col/TWO_THIRD 0 1 1))))
   (is (d= 0xff0000 @(col/as-int24 (col/hsva 0 1 1))))
   (is (d= 0x00ff00 @(col/as-int24 (col/hsva col/THIRD 1 1))))
   (is (d= 0x0000ff @(col/as-int24 (col/hsva col/TWO_THIRD 1 1))))
   (is (d= 0x3fff0000 @(col/as-int32 (col/hsva 0 1 1 0.25))))
   (is (d= 0x7f00ff00 @(col/as-int32 (col/hsva col/THIRD 1 1 0.5))))
   (is (d= 0xff0000ff @(col/as-int32 (col/hsva col/TWO_THIRD 1 1))))
   (is (d= [0 1 0.5 1] @(col/as-hsla (col/hsva 0 1 1))))
   (is (d= [0.5 1 0.25 1] @(col/as-hsla (col/hsva 0.5 1 0.5))))
   (is (d= [0.75 1 0.5 0.5] @(col/as-hsla (col/hsva 0.75 1 1 0.5))))
   (is (d= [col/THIRD 1 0.75 1] @(col/as-hsla (col/hsva col/THIRD 0.5 1))))
   (is (d= [1 0 0 0 1] @(col/as-cmyka (col/hsva 0.5 1 1))))
   (is (d= [0 1 0 0 1] @(col/as-cmyka (col/hsva 0.83333 1 1))))
   (is (d= [0 0 1 0 1] @(col/as-cmyka (col/hsva 0.16666 1 1))))
   (is (d= [0 0 0 1 1] @(col/as-cmyka (col/hsva 0 0 0))))
   (is (= "hsl(0,100%,25%)" @(col/as-css (col/hsva 0 1 0.5))))
   (is (= "hsl(120,100%,75%)" @(col/as-css (col/hsva col/THIRD 0.5 1))))
   (is (= "hsla(240,100%,25%,0.25)" @(col/as-css (col/hsva col/TWO_THIRD 1 0.5 0.25)))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest conversion-hsl
   (is (= thi.ng.color.core.HSLA (type (col/hsla 0 0 0))))
   (is (d= [0 0.5 0.75 0.25] @(col/hsla 0 0.5 0.75 0.25)))
   (is (d= [1 1 1 0.5] @(col/as-rgba (col/hsla 0 1 1 0.5))))
   (is (d= [1 0 0 0.5] @(col/as-rgba (col/hsla 0 1 0.5 0.5))))
   (is (d= [0 1 0 1] @(col/as-rgba (col/hsla col/THIRD 1 0.5))))
   (is (d= [0 1 1 1] @(col/as-rgba (col/hsla 0.5 1 0.5))))
   (is (d= [0 0 1 1] @(col/as-rgba (col/hsla col/TWO_THIRD 1 0.5 1))))
   (is (d= [0.5 0.5 0.5 1] @(col/as-rgba (col/hsla col/TWO_THIRD 0 0.5 1))))
   (is (d= 0xff0000 @(col/as-int24 (col/hsla 0 1 0.5))))
   (is (d= 0x00ff00 @(col/as-int24 (col/hsla col/THIRD 1 0.5))))
   (is (d= 0x0000ff @(col/as-int24 (col/hsla col/TWO_THIRD 1 0.5))))
   (is (d= 0x3fff0000 @(col/as-int32 (col/hsla 0 1 0.5 0.25))))
   (is (d= 0x7f00ff00 @(col/as-int32 (col/hsla col/THIRD 1 0.5 0.5))))
   (is (d= 0xff0000ff @(col/as-int32 (col/hsla col/TWO_THIRD 1 0.5))))
   (is (d= [0 1 1 1] @(col/as-hsva (col/hsla 0 1 0.5))))
   (is (d= [0.5 1 1 1] @(col/as-hsva (col/hsla 0.5 1 0.5))))
   (is (d= [0.75 0.5 1 0.5] @(col/as-hsva (col/hsla 0.75 1 0.75 0.5))))
   (is (d= [0.3333 0.66666 0.75 1] @(col/as-hsva (col/hsla col/THIRD 0.5 0.5))))
   (is (d= [1 0 0 0 1] @(col/as-cmyka (col/hsla 0.5 1 0.5))))
   (is (d= [0 1 0 0 1] @(col/as-cmyka (col/hsla 0.83333 1 0.5))))
   (is (d= [0 0 1 0 1] @(col/as-cmyka (col/hsla 0.16666 1 0.5))))
   (is (d= [0 0 0 1 1] @(col/as-cmyka (col/hsla 0 0 0))))
   (is (= "hsl(0,100%,50%)" @(col/as-css (col/hsla 0 1 0.5))))
   (is (= "hsl(120,50%,100%)" @(col/as-css (col/hsla col/THIRD 0.5 1))))
   (is (= "hsla(240,100%,50%,0.25)" @(col/as-css (col/hsla col/TWO_THIRD 1 0.5 0.25)))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest css-parse
    (is (= thi.ng.color.core.CSS (type (col/css "#fc3"))))
    (is (d= [1 0.8 0.2 1] @(col/as-rgba (col/css "#fc3"))))
    (is (d= [1 0.8 0.2 1] @(col/as-rgba (col/css "#ffcc33"))))
    (is (d= [1 0.8 0.2 1] @(col/as-rgba (col/css "rgb(255,204,51)"))))
    (is (d= [1 0.8 0.2 0.25] @(col/as-rgba (col/css "rgba(255,204,51,0.25)"))))
    (is (d= [1 0.8 0.2 0.25] @(col/as-rgba (col/css "rgba(100%,80%,20%,0.25)"))))
    (is (d= [0 1 1 1] @(col/as-rgba (col/css "hsl(180,100%,50%)"))))
    (is (d= [0 1 1 0.25] @(col/as-rgba (col/css "hsla(180,100%,50%,0.25)"))))
    (is (d= 0xffcc33 @(col/as-int24 (col/css "#fc3"))))
    (is (d= 0xffcc33 @(col/as-int24 (col/css "#ffcc33"))))
    (is (d= 0xffcc33 @(col/as-int24 (col/css "rgb(255,204,51)"))))
    (is (d= 0xffcc33 @(col/as-int24 (col/css "rgba(255,204,51,0.25)"))))
    (is (d= 0xffcc33 @(col/as-int24 (col/css "rgba(100%,80%,20%,0.25)"))))
    (is (d= 0x00feff @(col/as-int24 (col/css "hsl(180,100%,50%)"))))
    (is (d= 0x00feff @(col/as-int24 (col/css "hsla(180,100%,50%,0.25)"))))
    (is (d= 0xffffcc33 @(col/as-int32 (col/css "#fc3"))))
    (is (d= 0xffffcc33 @(col/as-int32 (col/css "#ffcc33"))))
    (is (d= 0xffffcc33 @(col/as-int32 (col/css "rgb(255,204,51)"))))
    (is (d= 0x3fffcc33 @(col/as-int32 (col/css "rgba(255,204,51,0.25)"))))
    (is (d= 0x3fffcc33 @(col/as-int32 (col/css "rgba(100%,80%,20%,0.25)"))))
    (is (d= 0xff00feff @(col/as-int32 (col/css "hsl(180,100%,50%)"))))
    (is (d= 0x3f00feff @(col/as-int32 (col/css "hsla(180,100%,50%,0.25)"))))
    (is (d= [0.125 0.8 1 1] @(col/as-hsva (col/css "#fc3"))))
    (is (d= [0.125 0.8 1 1] @(col/as-hsva (col/css "#ffcc33"))))
    (is (d= [0.125 0.8 1 1] @(col/as-hsva (col/css "rgb(255,204,51)"))))
    (is (d= [0.125 0.8 1 0.25] @(col/as-hsva (col/css "rgba(255,204,51,0.25)"))))
    (is (d= [0.125 0.8 1 0.25] @(col/as-hsva (col/css "rgba(100%,80%,20%,0.25)"))))
    (is (d= [0.5 1 1 1] @(col/as-hsva (col/css "hsl(180,100%,50%)"))))
    (is (d= [0.5 1 1 0.25] @(col/as-hsva (col/css "hsla(180,100%,50%,0.25)"))))
    (is (d= [0.125 1 0.6 1] @(col/as-hsla (col/css "#fc3"))))
    (is (d= [0.125 1 0.6 1] @(col/as-hsla (col/css "#ffcc33"))))
    (is (d= [0.125 1 0.6 1] @(col/as-hsla (col/css "rgb(255,204,51)"))))
    (is (d= [0.125 1 0.6 0.25] @(col/as-hsla (col/css "rgba(255,204,51,0.25)"))))
    (is (d= [0.125 1 0.6 0.25] @(col/as-hsla (col/css "rgba(100%,80%,20%,0.25)"))))
    (is (d= [0.5 1 0.5 1] @(col/as-hsla (col/css "hsl(180,100%,50%)"))))
    (is (d= [0.5 1 0.5 0.25] @(col/as-hsla (col/css "hsla(180,100%,50%,0.25)")))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest channel-access
    (let [c1 (col/rgba 0.1 0.2 0.3 0.4)
          c2 (col/int24 0xff8040)
          c3 (col/int32 0xff8040 0.5)]
      (is (d= 0.1 (col/red c1)))
      (is (d= 1.0 (col/red c2)))
      (is (d= 0.2 (col/green c1)))
      (is (d= 0.5 (col/green c2)))
      (is (d= 0.3 (col/blue c1)))
      (is (d= 0.25 (col/blue c2)))
      (is (d= 0.4 (col/alpha c1)))
      (is (d= 1 (col/alpha c2)))
      (is (d= 0.75 (col/saturation c2)))
      (is (d= 1 (col/brightness c2)))
      (is (d= 0 (col/cyan c2)))
      (is (d= 0.5 (col/magenta c2)))
      (is (d= 0.75 (col/yellow c2)))
      (is (d= 0 (col/black c2)))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest blending
    (let [c1  (col/rgba 1 0 0 0)
          c2  (col/rgba 0 1 0 1)
          c3  (col/rgba 0 0 1 0.5)
          c4  (col/hsva 0 1 1 0)
          c5  (col/hsva col/THIRD 1 1 1)
          c6  (col/hsva col/TWO_THIRD 1 1 0.5)
          c7  (col/hsla col/THIRD 1 0.5 1)
          c8  (col/hsla col/TWO_THIRD 1 1 0.5)
          c9  (col/int24 0xff0000)
          c10 (col/int24 0x00ff00)
          c11 (col/int24 0x0000ff)
          c12 (col/int32 0xff0000)
          c13 (col/int32 0xff00ff00)
          c14 (col/int32 0x7f0000ff)]
      ;; rgba
      (is (d= @c1 @(col/blend c1 c2 0)))
      (is (d= @c2 @(col/blend c1 c2 1)))
      (is (d= [0.5 0.5 0 0.5] @(col/blend c1 c2 0.5)))
      (is (d= [0.5 0 0.5 0.25] @(col/blend c1 c3 0.5)))
      (is (d= @(col/as-rgba c4) @(col/blend c1 c4 1)))
      (is (d= [0.5 0.5 0 0.5] @(col/blend c1 c5 0.5)))
      (is (d= [0.5 0.5 0 0.5] @(col/blend c1 c7 0.5)))
      ;; hsva
      (is (d= [col/SIXTH 1 1 0.5] @(col/blend c5 c1 0.5)))
      (is (d= [0.5 1 1 0.75] @(col/blend c5 c6 0.5)))
      (is (d= [0.975 0.75 0.5 0.5] @(col/blend (col/hsva 0.75 1 1) (col/hsva 0.2 0.5 0 0) 0.5)))
      (is (d= [0.0875 0.625 0.25 0.25] @(col/blend (col/hsva 0.75 1 1) (col/hsva 0.2 0.5 0 0) 0.75)))
      (is (d= [0.8625 0.875 0.75 0.75] @(col/blend (col/hsva 0.2 0.5 0 0) (col/hsva 0.75 1 1) 0.75)))
      ;; hsla
      (is (d= [col/SIXTH 1 0.5 0.5] @(col/blend c7 c1 0.5)))
      (is (d= [0.5 1 0.75 0.75] @(col/blend c7 c8 0.5)))
      (is (d= [0.975 0.75 0.5 0.5] @(col/blend (col/hsla 0.75 1 1) (col/hsla 0.2 0.5 0 0) 0.5)))
      (is (d= [0.0875 0.625 0.25 0.25] @(col/blend (col/hsla 0.75 1 1) (col/hsla 0.2 0.5 0 0) 0.75)))
      (is (d= [0.8625 0.875 0.75 0.75] @(col/blend (col/hsla 0.2 0.5 0 0) (col/hsla 0.75 1 1) 0.75)))
      ;; int24
      (is (= @c9 @(col/blend c9 c10 0)))
      (is (= @c10 @(col/blend c9 c10 1)))
      (is (= 0x7f7f00 @(col/blend c9 c10 0.5)))
      (is (= 0x3f00bf @(col/blend c9 c11 0.75)))
      (is (= 0x7f007f @(col/blend c9 c3 0.5)))
      (is (= 0x7f007f @(col/blend c9 c6 0.5)))
      (is (= 0x7f7f00 @(col/blend c9 c7 0.5)))
      (is (= 0xff7f7f @(col/blend c9 c8 0.5)))
      ;; int32
      (is (= 0xbf7f007f @(col/blend c14 c9 0.5)))
      (is (= 0xbf007f7f @(col/blend c14 c13 0.5)))
      (is (= 0xbf007f7f @(col/blend c14 c13 0.5)))
      (is (= 0x7f7f7f00 @(col/blend c12 c2 0.5)))
      (is (= 0x3f7f007f @(col/blend c12 c6 0.5)))
      (is (= 0x3fff7f7f @(col/blend c12 c8 0.5)))
   ))
#+END_SRC

** Complete namespace declaration

#+BEGIN_SRC clojure :tangle ../babel/test/thi/ng/color/test/core.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.color.test.core
    (:require
     [thi.ng.color.core :as col]
     [thi.ng.math.core :refer [delta=]]
     #?(:clj
        [clojure.test :refer :all]
        :cljs
        [cemerick.cljs.test :refer-macros [is deftest with-test testing]])))

  (def d= #(delta= % %2 0.01))

  <<test>>
#+END_SRC
