#+SETUPFILE: ../src/setup.org

* thi.ng.color.test.core

** Tests

#+BEGIN_SRC clojure :noweb-ref test
  (deftest conversion-rgb
    (is (delta= [1 0.5 0.25 0.75] (col/unwrap (col/rgba 1 0.5 0.25 0.75))))
    (is (delta= [0 1 1 1] (col/unwrap (col/as-hsva (col/rgba 1 0 0 1)))))
    (is (delta= [0.3333333 1 1 1] (col/unwrap (col/as-hsva (col/rgba 0 1 0 1)))))
    (is (delta= [0.6666666 1 1 1] (col/unwrap (col/as-hsva (col/rgba 0 0 1 1)))))
    (is (delta= [0.5 1 1 1] (col/unwrap (col/as-hsva (col/rgba 0 1 1 1)))))
    (is (delta= [0 0 1 1] (col/unwrap (col/as-hsva (col/rgba 1 1 1 1)))))
    (is (delta= [0 1 0.5 1] (col/unwrap (col/as-hsla (col/rgba 1 0 0 1)))))
    (is (delta= [0.3333333 1 0.5 1] (col/unwrap (col/as-hsla (col/rgba 0 1 0 1)))))
    (is (delta= [0.6666666 1 0.5 1] (col/unwrap (col/as-hsla (col/rgba 0 0 1 1)))))
    (is (delta= [0.5 1 0.5 1] (col/unwrap (col/as-hsla (col/rgba 0 1 1 1)))))
    (is (delta= [0 0 1 1] (col/unwrap (col/as-hsla (col/rgba 1 1 1 1)))))
    (is (= 0xff0000 (col/unwrap (col/as-int24 (col/rgba 1 0 0 1)))))
    (is (= 0x00ff00 (col/unwrap (col/as-int24 (col/rgba 0 1 0 1)))))
    (is (= 0x0000ff (col/unwrap (col/as-int24 (col/rgba 0 0 1 1)))))
    (is (= 0xffff0000 (col/unwrap (col/as-int32 (col/rgba 1 0 0 1)))))
    (is (= 0xff00ff00 (col/unwrap (col/as-int32 (col/rgba 0 1 0 1)))))
    (is (= 0xff0000ff (col/unwrap (col/as-int32 (col/rgba 0 0 1 1)))))
    (is (= [0.0 1.0 1.0 0.0 1.0] (col/unwrap (col/as-cmyka (col/rgba 1 0 0 1)))))
    (is (= [1.0 0.0 1.0 0.0 1.0] (col/unwrap (col/as-cmyka (col/rgba 0 1 0 1)))))
    (is (= [1.0 1.0 0.0 0.0 1.0] (col/unwrap (col/as-cmyka (col/rgba 0 0 1 1)))))
    (is (= "#ff0000" (col/unwrap (col/as-css (col/rgba 1 0 0 1)))))
    (is (= "#00ff00" (col/unwrap (col/as-css (col/rgba 0 1 0 1)))))
    (is (= "#0000ff" (col/unwrap (col/as-css (col/rgba 0 0 1 1))))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  #_(deftest conversion-hsv
   (is (delta= [1 0 0] (col/hsv->rgb [0 1 1])))
   (is (delta= [1 0 0] (col/hsv->rgb 0 1 1)))
   (is (delta= [1 0 0 0.5] (col/hsv->rgb 0 1 1 0.5)))
   (is (delta= [0 0.5 0] (col/hsv->rgb [0.333333 1 0.5]) 1e-3))
   (is (delta= [0 0.5 0] (col/hsv->rgb 0.333333 1 0.5) 1e-3))
   (is (delta= [0.5 0.5 1] (col/hsv->rgb [0.666666 0.5 1]) 1e-3))
   (is (delta= [0.5 0.5 1] (col/hsv->rgb 0.666666 0.5 1) 1e-3)))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest css-parse
    (is (delta= [1 0.8 0.2 1] (col/unwrap (col/as-rgba (col/css "#fc3")))))
    (is (delta= [1 0.8 0.2 1] (col/unwrap (col/as-rgba (col/css "#ffcc33")))))
    (is (delta= [1 0.8 0.2 1] (col/unwrap (col/as-rgba (col/css "rgb(255,204,51)")))))
    (is (delta= [1 0.8 0.2 0.25] (col/unwrap (col/as-rgba (col/css "rgba(255,204,51,0.25)")))))
    (is (delta= [1 0.8 0.2 0.25] (col/unwrap (col/as-rgba (col/css "rgba(100%,80%,20%,0.25)")))))
    (is (delta= [0 1 1 1] (col/unwrap (col/as-rgba (col/css "hsl(180,100%,50%)")))))
    (is (delta= [0 1 1 0.25] (col/unwrap (col/as-rgba (col/css "hsla(180,100%,50%,0.25)"))))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest channel-access
    (let [c1 (col/rgba 0.1 0.2 0.3 0.4)
          c2 (col/int24 0xff8040)
          c3 (col/int32 0xff8040 0.5)]
      (is (delta= 0.1 (col/red c1)))
      (is (delta= 1.0 (col/red c2)))
      (is (delta= 0.2 (col/green c1)))
      (is (delta= 0.5 (col/green c2) 0.01))
      (is (delta= 0.3 (col/blue c1)))
      (is (delta= 0.25 (col/blue c2) 0.01))
      (is (delta= 0.4 (col/alpha c1)))
      (is (delta= 1 (col/alpha c2)))
      #_(is (delta= 0.2 (col/saturation c)))
      #_(is (delta= 0.3 (col/brightness c)))
      #_(is (delta= 0.1 (col/cyan c)))
      #_(is (delta= 0.2 (col/magenta c)))
      #_(is (delta= 0.3 (col/yellow c)))
      #_(is (delta= 0.4 (col/black c)))
      #_(is (delta= 0.4 (col/alpha c)))
      #_(is (delta= 0.1 (col/alpha [0 0 0 0 0.1])))))
#+END_SRC

** Complete namespace declaration

#+BEGIN_SRC clojure :tangle ../babel/test/thi/ng/color/test/core.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.color.test.core
    (:require
     [thi.ng.color.core :as col]
     [thi.ng.math.core :refer [delta=]]
     #?(:clj
        [clojure.test :refer :all]
        :cljs
        [cemerick.cljs.test :refer-macros [is deftest with-test testing]])))

  <<test>>
#+END_SRC
