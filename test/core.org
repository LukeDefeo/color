#+SETUPFILE: ../src/setup.org

* thi.ng.color.test.core

** Tests

#+BEGIN_SRC clojure :noweb-ref test
  (deftest conversion-rgb->hsv
    (is (delta= [0 1 1] (col/rgb->hsv [1 0 0])))
    (is (delta= [0 1 1] (col/rgb->hsv 1 0 0)))
    (is (delta= [0 1 1 0.5] (col/rgb->hsv 1 0 0 0.5)))
    (is (delta= [0.3333333 1 1] (col/rgb->hsv [0 1 0])))
    (is (delta= [0.3333333 1 1] (col/rgb->hsv 0 1 0)))
    (is (delta= [0.6666666 1 1] (col/rgb->hsv [0 0 1])))
    (is (delta= [0.6666666 1 1] (col/rgb->hsv 0 0 1))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest conversion-hsv->rgb
   (is (delta= [1 0 0] (col/hsv->rgb [0 1 1])))
   (is (delta= [1 0 0] (col/hsv->rgb 0 1 1)))
   (is (delta= [1 0 0 0.5] (col/hsv->rgb 0 1 1 0.5)))
   (is (delta= [0 0.5 0] (col/hsv->rgb [0.333333 1 0.5]) 1e-3))
   (is (delta= [0 0.5 0] (col/hsv->rgb 0.333333 1 0.5) 1e-3))
   (is (delta= [0.5 0.5 1] (col/hsv->rgb [0.666666 0.5 1]) 1e-3))
   (is (delta= [0.5 0.5 1] (col/hsv->rgb 0.666666 0.5 1) 1e-3)))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest css-parse
    (is (delta= [1 0.8 0.2 1] (col/css->rgba "#fc3")))
    (is (delta= [1 0.8 0.2 1] (col/css->rgba "#ffcc33")))
    (is (delta= [1 0.8 0.2 1] (col/css->rgba "rgb(255,204,51)")))
    (is (delta= [1 0.8 0.2 0.25] (col/css->rgba "rgba(255,204,51,0.25)")))
    (is (delta= [1 0.8 0.2 0.25] (col/css->rgba "rgba(100%,80%,20%,0.25)")))
    (is (delta= [0 0.5 0.5 1] (col/css->rgba "hsl(180,100%,50%)")))
    (is (delta= [0 0.5 0.5 0.25] (col/css->rgba "hsla(180,100%,50%,0.25)"))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref test
  (deftest channel-access
    (let [c [0.1 0.2 0.3 0.4]]
      (is (= 0.1 (col/red c)))
      (is (= 0.2 (col/green c)))
      (is (= 0.3 (col/blue c)))
      (is (= 0.1 (col/hue c)))
      (is (= 0.2 (col/saturation c)))
      (is (= 0.3 (col/brightness c)))
      (is (= 0.1 (col/cyan c)))
      (is (= 0.2 (col/magenta c)))
      (is (= 0.3 (col/yellow c)))
      (is (= 0.4 (col/black c)))
      (is (= 0.4 (col/alpha c)))
      (is (= 0.1 (col/alpha [0 0 0 0 0.1])))))
#+END_SRC

** Complete namespace declaration

#+BEGIN_SRC clojure :tangle ../babel/test/thi/ng/color/test/core.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.color.test.core
    (:require
     [thi.ng.color.core :as col]
     [thi.ng.math.core :refer [delta=]]
     #?(:clj
        [clojure.test :refer :all]
        :cljs
        [cemerick.cljs.test :refer-macros [is deftest with-test testing]])))

  <<test>>
#+END_SRC
